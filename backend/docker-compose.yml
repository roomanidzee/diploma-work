version: "2.4"

services:
  system_service:
    networks:
      - std_network

    image: "romanidze/std_system_app:latest"

    build:
      context: system_service
      dockerfile: docker/app/Dockerfile
      args:
        - PROD_JVM_OPTS=-Xmx200m
        - PORT=8000
        - DOCKERIZE_VERSION=v0.6.1

    container_name: std_system_app

    volumes:
      - ./system_service:/code
      - ./system_service/build/libs:/code/build/libs

    command: launch-prod

    ports:
      - "8000:8000"

  file_service:
    networks:
      - std_network

    image: "romanidze/std_files_app:latest"

    build:
      context: file_service
      dockerfile: docker/app/Dockerfile
      args:
        - PORT=5000

    container_name: std_files_app

    volumes:
      - ./file_service:/code

    command: launch-app

    ports:
      - "5000:5000"

  analysis_service_app:
    networks:
      - std_network

    image: "romanidze/std_analysis_app:latest"

    build:
      context: analysis_service/src
      dockerfile: docker/Dockerfile
      args:
        - DOCKERIZE_VERSION=v0.6.1
        - POETRY_VERSION=1.0.5

    container_name: std_analysis_app

    volumes:
      - ./analysis_services/src:/code

    ports:
      - 8005:8000

    command: launch-app

  analysis_service_worker:
    networks:
      - std_network

    image: "romanidze/std_analysis_app:latest"

    container_name: std_analysis_app

    volumes:
      - ./analysis_services/src:/code

    command: launch-worker

  mongo:
    networks:
      - std_network

    image: "bitnami/mongodb:4.2.1"

    container_name: std_mongo

    ports:
      - "27017:27017"

    environment:
      - MONGODB_USERNAME=studeeper_user
      - MONGODB_PASSWORD=studeeper_pwd
      - MONGODB_DATABASE=studeeper_db

  redis:
    networks:
      - std_network

    image: "redis:5.0.7-alpine"

    container_name: std_redis

    ports:
      - "6379:6379"

  zookeeper-service:
    networks:
      - std_network

    image: "confluentinc/cp-zookeeper:5.3.3"

    container_name: std_zk

    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka-service:
    networks:
      - std_network

    image: "confluentinc/cp-kafka:5.3.3"

    container_name: std_kafka

    environment:
      - KAFKA_HEAP_OPTS=-Xmx700m
      - KAFKA_ZOOKEEPER_CONNECT=std_zk:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://std_kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LOG4J_LOGGERS=kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1

    ports:
      - "9092:9092"
      - "9094:9094"

  kafka-topics-init:
    networks:
      - std_network

    image: "roomanidze/kafka-topics-init:latest"

    build:
      context: docker_config/kafka/topics_creation
      dockerfile: Dockerfile
      args:
        - NEW_KAFKA_TOPICS=student_file_source,student_facility_source,request_source

    container_name: std_kafka_topics_init

  clickhouse:
    networks:
      - std_network

    image: "yandex/clickhouse-server:20.3.2.1"

    container_name: std_clickhouse

    volumes:
      - "./docker_config/clickhouse/config.xml:/etc/clickhouse-server/config.xml"
      - "./docker_config/clickhouse/ddl.sql:/docker-entrypoint-initdb.d"

    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"

    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144

  clickhouse-gui:
    networks:
      - std_network

    image: "spoonest/clickhouse-tabix-web-client:stable"

    # links:
    #    - clickhouse

    ports:
      - "9009:80"

    container_name: std_analytics

networks:
  std_network:
